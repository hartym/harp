image: alpine:3.12

stages:
  - build
  - test
  - artefacts
  - release

variables:
  DOCKER_BUILD: docker image build --pull
  DOCKER_BUILDKIT: "1"
  DOCKER_CLI_EXPERIMENTAL: enabled
  DOCKER_HOST: tcp://docker:2375/
  GIT_FETCH_EXTRA_FLAGS: --tags
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_TAGS: ${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_IID}
  DOCKER_IMAGE: registry.gitlab.com/makersquad/oss/harp
  DOCKER_IMAGE_DEV: registry.gitlab.com/makersquad/oss/harp
  CI_REGISTRY_PASSWORD: ${CI_JOB_TOKEN}

.DockerBuild: &DockerBuild
  image: docker:24.0.6
  stage: build
  services:
    - docker:24.0.6-dind
  tags:
    - gitlab-org-docker
  before_script:
    - apk add git make py3-pip py3-jinja2 bash
    - pip install 'poetry==1.7.1'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:runtime:
  <<: *DockerBuild

  script:
    - bash bin/sandbox make buildc pushc

build:dev:
  <<: *DockerBuild

  variables:
    DOCKER_TAGS_SUFFIX: -dev

  script:
    - bash bin/sandbox make buildc-dev pushc-dev

test:backend:
  needs: ["build:dev"]
  image: ${DOCKER_IMAGE}:${DOCKER_TAGS}-dev
  stage: test
  services:
    - docker:24.0.6-dind
  variables:
    GIT_STRATEGY: none
    PYTEST: /opt/venv/bin/pytest
    PYTEST_OPTIONS: "-m 'not subprocess'"
  script:
    - (cd /opt/harp/src; poetry run make test-backend)

test:frontend:
  needs: ["build:dev"]
  image: ${DOCKER_IMAGE}:${DOCKER_TAGS}-dev
  stage: test
  services:
    - docker:24.0.6-dind
  variables:
    GIT_STRATEGY: none
  script:
    - (cd /opt/harp/src/harp_apps/dashboard/frontend; pnpm test:unit)

doc:html:
  needs: ["build:dev"]
  image: ${DOCKER_IMAGE}:${DOCKER_TAGS}-dev
  stage: artefacts
  variables:
    GIT_STRATEGY: none
    SPHINXBUILD: /opt/venv/bin/sphinx-build
  script:
    - (cd /opt/harp/src/docs; make html)
    - mv /opt/harp/src/docs/_build/html harp-doc
  artifacts:
    name: harp-doc
    expire_in: 1 month
    paths:
      - "harp-doc/*"

storybook:
  needs: ["build:dev"]
  image: ${DOCKER_IMAGE}:${DOCKER_TAGS}-dev
  stage: artefacts
  variables:
    GIT_STRATEGY: none
  script:
    - (cd /opt/harp/src/harp_apps/dashboard/frontend; pnpm ui:build)
    - mv /opt/harp/src//harp_apps/dashboard/frontend/build harp-ui
  artifacts:
    name: harp-ui
    expire_in: 1 month
    paths:
      - "harp-ui/*"

release:
  image: docker:24.0.6
  needs: ["build:runtime", "test:backend", "test:frontend"]
  stage: release
  only:
    - main
    - dev
    - tags
  services:
    - docker:24.0.6-dind
  variables:
    GIT_STRATEGY: none
    SOURCE_IMAGE: registry.gitlab.com/makersquad/oss/harp:${DOCKER_TAGS}
  before_script:
    - apk add git make py3-pip py3-jinja2 bash
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull ${SOURCE_IMAGE}
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD docker.io
  script:
    - test -n "$CI_COMMIT_BRANCH" && docker tag ${SOURCE_IMAGE} makersquad/harp-proxy:git-$CI_COMMIT_BRANCH
    - test -n "$CI_COMMIT_TAG" && docker tag ${SOURCE_IMAGE} makersquad/harp-proxy:$CI_COMMIT_TAG
    - test -n "$CI_COMMIT_TAG" && docker tag ${SOURCE_IMAGE} makersquad/harp-proxy:latest
    - docker push makersquad/harp-proxy --all-tags
